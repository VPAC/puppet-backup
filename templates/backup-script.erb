#!/bin/bash

# This backup script is managed by PUPPET

mkdir -p /var/log/backups

# user variables
backup_servers="<% backup_servers.each do |server| %>backups@<%= server %> <%end %>"
logdir=/var/log/backups
max_fs_size=249

# modulo is the number of days backups to keep on the server
day_num=`date "+%u"`
modulo=`expr ${day_num} % 3`

# check for ionice and use it if found
ionice=`/usr/bin/which ionice`
if [ -n "$ionice" ] ; then
  ionice="$ionice -c3"
fi


function log_info() {
  logger -t $0 -p local0.notice -i "[info] $@" ; echo "`date` $@" >> $logfile
}


function log_error () {
  logger -t $0 -p local0.err -i "[error] $@" ; echo "`date` $@" >> $logfile
}


function log_warn () {
  logger -t $0 -p local0.warning -i "[warning] $0" ; echo "`date` $@" >> $logfile
}


function backup_fs () {

  # get the size of the FS in 1GB blocks
  fs_size=`df -B 1073741824 -P ${fs} | grep ${fs} | awk '{print $3}'`

  # don't backup filesystems using more than $max_fs_size
  if [ ${fs_size} -gt ${max_fs_size} ]; then
    log_warn "Skipping ${fs}: size is greater than ${max_fs_size}GB"
    continue
  fi

  # if the filesystem is / then add 'root' to the filename
  if [ "${fs}" == "/" ]; then
    fs_name="_root"
  else
    fs_name=`echo ${fs} | tr '/' '_'`
  fi

  # the backup filename will look like hostname.vpac.org_root_0.tar.gz
  backup_filename=${fqdn}${fs_name}_${modulo}.tar.gz

  log_info "Filesystem ${fs} => ${backup_filename}"

  # generate the exclude list
  cd ${fs} || continue
  ( [ "${fs}" = / ] && find ./tmp -mount ! -name tmp 2>/dev/null; echo "./tmp/${backup_filename}" || cat /dev/null ) >/tmp/exc.$$

  for server in $backup_servers ; do

    log_info "Backing up ${backup_filename} to ${server}"

    # remove the old backup file from the server
    ssh ${server} "rm -f ${backup_filename}"

    # create the new backup file
    ${ionice} nice tar -czf ${server}:${backup_filename} --one-file-system --ignore-failed-read --rsh-command=/usr/bin/ssh -X /tmp/exc.$$ . 2>&1 | \
    grep -v "socket ignored" | \
    grep -v "file changed as we read it" | \
    grep -v "Cannot stat: No such file or directory" | \
    grep -v "File removed before we read it"

    # check exit status of tar process (not the greps)
    if [ ${PIPESTATUS[0]} -gt 1 ]; then
      log_error "${fs} => ${server} => Backup failed."
      exit_status=1
    else
      log_info "${fs} => ${server} => Backup completed."
    fi

  done

  rm /tmp/exc.$$
}


function main () {

  fqdn=`hostname -f`
  logfile=${logdir}/${fqdn}-`date --iso`.log
  exit_status=0

  log_info "Starting backup script on ${fqdn}"

  # Get the list of mounted filsystems,  but don't backup the filesystems named:
  # backup|xenguests|home|srbdata|squid|GMT
  filesystems=`mount -l -t xfs,ext4,ext3,ext2,simfs | awk '{print $3}' | egrep -iv "backup|xenguests|home|srbdata|squid|GMT"`

  log_info "Backing up filesystems: ${filesystems}"

  for fs in ${filesystems}; do
    backup_fs
  done

  log_info "Backup script completed."

  # delete backup log files older than 30 days
  cd ${logdir}; find . -maxdepth 1 -name "*.log" -ctime +30 -exec rm -f {} +

  if [ ${exit_status} -gt 1 ] ; then
    cat ${logfile}
  fi

  exit ${exit_status}

}

main

# vim:syntax=sh
